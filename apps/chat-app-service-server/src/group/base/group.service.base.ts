/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Group as PrismaGroup,
  Poll as PrismaPoll,
  Statistic as PrismaStatistic,
  User as PrismaUser,
} from "@prisma/client";

export class GroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GroupCountArgs, "select">): Promise<number> {
    return this.prisma.group.count(args);
  }

  async groups<T extends Prisma.GroupFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GroupFindManyArgs>
  ): Promise<PrismaGroup[]> {
    return this.prisma.group.findMany<Prisma.GroupFindManyArgs>(args);
  }
  async group<T extends Prisma.GroupFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GroupFindUniqueArgs>
  ): Promise<PrismaGroup | null> {
    return this.prisma.group.findUnique(args);
  }
  async createGroup<T extends Prisma.GroupCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GroupCreateArgs>
  ): Promise<PrismaGroup> {
    return this.prisma.group.create<T>(args);
  }
  async updateGroup<T extends Prisma.GroupUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GroupUpdateArgs>
  ): Promise<PrismaGroup> {
    return this.prisma.group.update<T>(args);
  }
  async deleteGroup<T extends Prisma.GroupDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GroupDeleteArgs>
  ): Promise<PrismaGroup> {
    return this.prisma.group.delete(args);
  }

  async findPolls(
    parentId: string,
    args: Prisma.PollFindManyArgs
  ): Promise<PrismaPoll[]> {
    return this.prisma.group
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .polls(args);
  }

  async findStatistics(
    parentId: string,
    args: Prisma.StatisticFindManyArgs
  ): Promise<PrismaStatistic[]> {
    return this.prisma.group
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .statistics(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.group
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
