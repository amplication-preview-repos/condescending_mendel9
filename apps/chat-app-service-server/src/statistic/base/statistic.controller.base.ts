/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StatisticService } from "../statistic.service";
import { StatisticCreateInput } from "./StatisticCreateInput";
import { Statistic } from "./Statistic";
import { StatisticFindManyArgs } from "./StatisticFindManyArgs";
import { StatisticWhereUniqueInput } from "./StatisticWhereUniqueInput";
import { StatisticUpdateInput } from "./StatisticUpdateInput";

export class StatisticControllerBase {
  constructor(protected readonly service: StatisticService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Statistic })
  async createStatistic(
    @common.Body() data: StatisticCreateInput
  ): Promise<Statistic> {
    return await this.service.createStatistic({
      data: {
        ...data,

        group: data.group
          ? {
              connect: data.group,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        group: {
          select: {
            id: true,
          },
        },

        id: true,
        totalMessages: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Statistic] })
  @ApiNestedQuery(StatisticFindManyArgs)
  async statistics(@common.Req() request: Request): Promise<Statistic[]> {
    const args = plainToClass(StatisticFindManyArgs, request.query);
    return this.service.statistics({
      ...args,
      select: {
        createdAt: true,

        group: {
          select: {
            id: true,
          },
        },

        id: true,
        totalMessages: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Statistic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async statistic(
    @common.Param() params: StatisticWhereUniqueInput
  ): Promise<Statistic | null> {
    const result = await this.service.statistic({
      where: params,
      select: {
        createdAt: true,

        group: {
          select: {
            id: true,
          },
        },

        id: true,
        totalMessages: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Statistic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStatistic(
    @common.Param() params: StatisticWhereUniqueInput,
    @common.Body() data: StatisticUpdateInput
  ): Promise<Statistic | null> {
    try {
      return await this.service.updateStatistic({
        where: params,
        data: {
          ...data,

          group: data.group
            ? {
                connect: data.group,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          group: {
            select: {
              id: true,
            },
          },

          id: true,
          totalMessages: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Statistic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStatistic(
    @common.Param() params: StatisticWhereUniqueInput
  ): Promise<Statistic | null> {
    try {
      return await this.service.deleteStatistic({
        where: params,
        select: {
          createdAt: true,

          group: {
            select: {
              id: true,
            },
          },

          id: true,
          totalMessages: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
