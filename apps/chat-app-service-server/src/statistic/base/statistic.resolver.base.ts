/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Statistic } from "./Statistic";
import { StatisticCountArgs } from "./StatisticCountArgs";
import { StatisticFindManyArgs } from "./StatisticFindManyArgs";
import { StatisticFindUniqueArgs } from "./StatisticFindUniqueArgs";
import { CreateStatisticArgs } from "./CreateStatisticArgs";
import { UpdateStatisticArgs } from "./UpdateStatisticArgs";
import { DeleteStatisticArgs } from "./DeleteStatisticArgs";
import { Group } from "../../group/base/Group";
import { User } from "../../user/base/User";
import { StatisticService } from "../statistic.service";
@graphql.Resolver(() => Statistic)
export class StatisticResolverBase {
  constructor(protected readonly service: StatisticService) {}

  async _statisticsMeta(
    @graphql.Args() args: StatisticCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Statistic])
  async statistics(
    @graphql.Args() args: StatisticFindManyArgs
  ): Promise<Statistic[]> {
    return this.service.statistics(args);
  }

  @graphql.Query(() => Statistic, { nullable: true })
  async statistic(
    @graphql.Args() args: StatisticFindUniqueArgs
  ): Promise<Statistic | null> {
    const result = await this.service.statistic(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Statistic)
  async createStatistic(
    @graphql.Args() args: CreateStatisticArgs
  ): Promise<Statistic> {
    return await this.service.createStatistic({
      ...args,
      data: {
        ...args.data,

        group: args.data.group
          ? {
              connect: args.data.group,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Statistic)
  async updateStatistic(
    @graphql.Args() args: UpdateStatisticArgs
  ): Promise<Statistic | null> {
    try {
      return await this.service.updateStatistic({
        ...args,
        data: {
          ...args.data,

          group: args.data.group
            ? {
                connect: args.data.group,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Statistic)
  async deleteStatistic(
    @graphql.Args() args: DeleteStatisticArgs
  ): Promise<Statistic | null> {
    try {
      return await this.service.deleteStatistic(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Group, {
    nullable: true,
    name: "group",
  })
  async getGroup(@graphql.Parent() parent: Statistic): Promise<Group | null> {
    const result = await this.service.getGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Statistic): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
