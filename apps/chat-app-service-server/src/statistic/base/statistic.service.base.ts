/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Statistic as PrismaStatistic,
  Group as PrismaGroup,
  User as PrismaUser,
} from "@prisma/client";

export class StatisticServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StatisticCountArgs, "select">
  ): Promise<number> {
    return this.prisma.statistic.count(args);
  }

  async statistics<T extends Prisma.StatisticFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StatisticFindManyArgs>
  ): Promise<PrismaStatistic[]> {
    return this.prisma.statistic.findMany<Prisma.StatisticFindManyArgs>(args);
  }
  async statistic<T extends Prisma.StatisticFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StatisticFindUniqueArgs>
  ): Promise<PrismaStatistic | null> {
    return this.prisma.statistic.findUnique(args);
  }
  async createStatistic<T extends Prisma.StatisticCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StatisticCreateArgs>
  ): Promise<PrismaStatistic> {
    return this.prisma.statistic.create<T>(args);
  }
  async updateStatistic<T extends Prisma.StatisticUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StatisticUpdateArgs>
  ): Promise<PrismaStatistic> {
    return this.prisma.statistic.update<T>(args);
  }
  async deleteStatistic<T extends Prisma.StatisticDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StatisticDeleteArgs>
  ): Promise<PrismaStatistic> {
    return this.prisma.statistic.delete(args);
  }

  async getGroup(parentId: string): Promise<PrismaGroup | null> {
    return this.prisma.statistic
      .findUnique({
        where: { id: parentId },
      })
      .group();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.statistic
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
